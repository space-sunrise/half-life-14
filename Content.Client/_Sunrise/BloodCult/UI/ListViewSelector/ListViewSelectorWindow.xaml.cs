using System.Numerics;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.BloodCult.UI.ListViewSelector;

[GenerateTypedNameReferences]
public partial class ListViewSelectorWindow : DefaultWindow
{
    private readonly IPrototypeManager _prototypeManager;
    private readonly SpriteSystem _sprite;
    public Action<string, int>? ItemSelected;

    public ListViewSelectorWindow(IPrototypeManager prototypeManager, IEntityManager entityManager)
    {
        RobustXamlLoader.Load(this);
        _prototypeManager = prototypeManager;
        _sprite = entityManager.System<SpriteSystem>();
    }

    public void PopulateList(List<string> items)
    {
        ClearGrid();

        foreach (var item in items)
        {
            if (!_prototypeManager.TryIndex(item, out EntityPrototype? runeProto))
                continue;

            var button = new Button
            {
                MinSize = new Vector2(100, 100),
                MaxSize = new Vector2(100, 100),
                HorizontalExpand = true,
                StyleClasses = { StyleBase.ButtonSquare },
                ToggleMode = false,
                ToolTip = Loc.GetString($"ent-{item}"),
                TooltipDelay = 0.01f,
            };

            button.OnPressed += _ => ItemSelected?.Invoke(item, items.IndexOf(item));
            ItemsGrid.AddChild(button);

            var texture = _sprite.GetPrototypeIcon(runeProto);
            button.AddChild(new TextureRect
            {
                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                Texture = texture.Default,
                Modulate = Color.FromHex("#F80000")
            });
        }
    }

    private void ClearGrid()
    {
        ItemsGrid.RemoveAllChildren();
    }
}
