using System.Linq;
using Content.Shared._Sunrise.Contributors;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Sunrise.Contributors;

[GenerateTypedNameReferences]
public sealed partial class ContributorsTop : Control
{
    [Dependency] private readonly ContributorsManager _contributorsManager = default!;

    private readonly Dictionary<int, ContributorEntryControl> _contributorControls = new();

    public ContributorsTop()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _contributorsManager.ContributorsDataListChanged += RefreshContributors;
    }

    private void RefreshContributors(List<ContributorEntry> contributors)
    {
        var sortedContributors = contributors.OrderByDescending(x => x.Contributions).ToList();

        var toRemove = _contributorControls.Keys.Where(id => !sortedContributors.Any(c => c.GithubId == id)).ToList();
        foreach (var id in toRemove)
        {
            if (_contributorControls.TryGetValue(id, out var control))
            {
                ContributorsList.RemoveChild(control);
                _contributorControls.Remove(id);
            }
        }

        foreach (var contributor in sortedContributors)
        {
            if (_contributorControls.TryGetValue(contributor.GithubId, out var existingControl))
            {
                existingControl.UpdateData(contributor);
            }
            else
            {
                var control = new ContributorEntryControl();
                control.UpdateData(contributor);
                _contributorControls[contributor.GithubId] = control;
                ContributorsList.AddChild(control);
            }
        }
    }
}

