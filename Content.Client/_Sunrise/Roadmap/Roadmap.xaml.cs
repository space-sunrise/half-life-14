using Content.Shared._Sunrise.Roadmap;
using Content.Shared._Sunrise.SunriseCCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.Roadmap;

[GenerateTypedNameReferences]
public sealed partial class Roadmap : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public Roadmap()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var roadmapId = _cfg.GetCVar(SunriseCCVars.RoadmapId);
        if (!_prototype.TryIndex<RoadmapVersionsPrototype>(roadmapId, out var roadmapVersions))
            return;

        PopulateRoadmap(roadmapVersions);
    }

    private void PopulateRoadmap(RoadmapVersionsPrototype roadmapVersions)
    {
        var headerLocale = _loc.GetString("ui-roadmap-header");
        var header = $"{headerLocale} {roadmapVersions.Fork}";
        Title = header;

        MainBox.RemoveAllChildren();

        foreach (var data in roadmapVersions.Versions)
        {
            var column = CreateVersionColumn(data.Name);

            GenerateGoals(data.Goals, column);

            MainBox.AddChild(column);
        }
    }

    private BoxContainer CreateVersionColumn(string labelName)
    {
        var column = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
            Margin = new Thickness(0, 0, 10, 0),
        };

        var nameLabel = new Label
        {
            Text = _loc.GetString(labelName),
            StyleClasses = { "LabelHeadingBigger" },
            HorizontalAlignment = HAlignment.Center,
            HorizontalExpand = true,
            FontColorOverride = Color.FromHex("#ffffff"),
            Margin = new Thickness(0, 0, 0, 10),
        };

        column.AddChild(nameLabel);

        return column;
    }

    private void GenerateGoals(IReadOnlyList<RoadmapGoal> goals, BoxContainer targetColumn)
    {
        foreach (var goal in goals)
        {
            var roadmapItem = new RoadmapItem
            {
                HeaderText = _loc.GetString(goal.Name),
                Text = _loc.GetString(goal.Desc),
                ItemState = goal.State,
            };

            targetColumn.AddChild(roadmapItem);
        }
    }
}
